// Vertex shader
#if defined(WEBGL2) || defined(WEBGPU)
precision highp sampler2DArray;
#endif
precision highp float;

//Attributes
attribute vec2 position;


//Uniforms
uniform vec2 u_Scale;


//Varyings
varying vec2 v_position;




//Constants
float u_Constant = 1.0;


//Entry point
void main(void) {

//Position3D
vec4 xyzw = vec4(position, 0.0, u_Constant).xyzw;

//VertexOutput
gl_Position = xyzw;
v_position = position;

}

// Fragment shader
#if defined(PREPASS)
#extension GL_EXT_draw_buffers : require
layout(location = 0) out highp vec4 glFragData[SCENE_MRT_COUNT];
highp vec4 gl_FragColor;
#endif
#if defined(WEBGL2) || defined(WEBGPU)
precision highp sampler2DArray;
#endif
precision highp float;

//Uniforms
uniform vec2 u_Scale;


//Samplers
uniform sampler2D textureSampler;


//Varyings
varying vec2 v_position;


//CurrentScreen
#include<helperFunctions>



//Constants
float u_Constant = 1.0;


//Entry point
void main(void) {

//uv0
vec2 output1 = 0.0 + (v_position - -1.0) * (1.0 - 0.0) / (1.0 - -1.0);

//UV scale
vec2 output0 = output1 * u_Scale;

//CurrentScreen
vec4 tempTextureRead = texture2D(textureSampler, output0);
vec4 rgba = tempTextureRead.rgba;

//FragmentOutput
gl_FragColor  = rgba;
#ifdef CONVERTTOLINEAR0
gl_FragColor  = toLinearSpace(gl_FragColor);
#endif
#ifdef CONVERTTOGAMMA0
gl_FragColor  = toGammaSpace(gl_FragColor);
#endif
#if defined(PREPASS)
gl_FragData[0] = gl_FragColor;
#endif

}