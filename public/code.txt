var nodeMaterial = new BABYLON.NodeMaterial("node");
nodeMaterial.mode = BABYLON.NodeMaterialModes.Material;

// InputBlock
var position = new BABYLON.InputBlock("position");
position.visibleInInspector = false;
position.visibleOnFrame = false;
position.target = 1;
position.setAsAttribute("position");

// TransformBlock
var WorldPos = new BABYLON.TransformBlock("WorldPos");
WorldPos.visibleInInspector = false;
WorldPos.visibleOnFrame = false;
WorldPos.target = 1;
WorldPos.complementZ = 0;
WorldPos.complementW = 1;

// InputBlock
var World = new BABYLON.InputBlock("World");
World.visibleInInspector = false;
World.visibleOnFrame = false;
World.target = 1;
World.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);

// TransformBlock
var WorldPosViewProjectionTransform = new BABYLON.TransformBlock("WorldPos * ViewProjectionTransform");
WorldPosViewProjectionTransform.visibleInInspector = false;
WorldPosViewProjectionTransform.visibleOnFrame = false;
WorldPosViewProjectionTransform.target = 1;
WorldPosViewProjectionTransform.complementZ = 0;
WorldPosViewProjectionTransform.complementW = 1;

// InputBlock
var ViewProjection = new BABYLON.InputBlock("ViewProjection");
ViewProjection.visibleInInspector = false;
ViewProjection.visibleOnFrame = false;
ViewProjection.target = 1;
ViewProjection.setAsSystemValue(BABYLON.NodeMaterialSystemValues.ViewProjection);

// ElbowBlock
var ElbowBlock_20 = new BABYLON.ElbowBlock("");
ElbowBlock_20.visibleInInspector = false;
ElbowBlock_20.visibleOnFrame = false;
ElbowBlock_20.target = 1;

// ShadowMapBlock
var ShadowMap = new BABYLON.ShadowMapBlock("ShadowMap");
ShadowMap.visibleInInspector = false;
ShadowMap.visibleOnFrame = false;
ShadowMap.target = 2;

// CustomBlock
var RayMarching = new BABYLON.CustomBlock("RayMarching");
RayMarching.visibleInInspector = false;
RayMarching.visibleOnFrame = false;
RayMarching.target = 2;
RayMarching.options = {"name":"RayMarching","comments":"","target":"Fragment","inParameters":[{"name":"worldPosIn","type":"Vector3"},{"name":"cameraPosition","type":"Vector3"},{"name":"time","type":"Float"},{"name":"world","type":"Matrix"}],"outParameters":[{"name":"worldPos","type":"Vector4"},{"name":"worldNormal","type":"Vector4"}],"functionName":"raymarch","code":["float sdSphere( vec3 p, float s )","{","  return length(p)-s;","}","","float sdRoundBox( vec3 p, vec3 b, float r )","{","  vec3 q = abs(p) - b;","  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;","}","float opSmoothUnion( float d1, float d2, float k ) {","    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );","    return mix( d2, d1, h ) - k*h*(1.0-h);","}","float sdf(vec3 p) {","    float ds = sdSphere(p, 0.4+0.3*sin(u_Time*1.5));","    float dc = sdRoundBox(p, vec3(1.4, 0.5, 0.2)/2., 0.2+0.1*sin(u_Time*2.2));","    return opSmoothUnion(ds, dc, 0.05);","}","","vec3 calcNormal( in vec3 p )","{","    const float h = 0.0001;","    const vec2 k = vec2(1,-1);","    return normalize( k.xyy*sdf( p + k.xyy*h ) + ","                      k.yyx*sdf( p + k.yyx*h ) + ","                      k.yxy*sdf( p + k.yxy*h ) + ","                      k.xxx*sdf( p + k.xxx*h ) );","}","","void raymarch(vec3 worldPosIn, vec3 worldCameraPos, float time, mat4 world, out vec4 worldPos, out vec4 worldNormal) {","    #if defined(SM_LIGHTTYPE_DIRECTIONALLIGHT)","        vec3 ro = worldPosIn;","        vec3 rd = normalize(lightDataSM);","    #else","        vec3 ro = worldCameraPos;","        vec3 rd = normalize(worldPosIn - ro);","    #endif","    float dO = 0.;","    mat4 invWorld = inverse(world);","    for(int i=0;i<100;i++)","    {","        vec4 p = vec4(ro + rd * dO, 1.0);","        float ds = sdf((invWorld * p).xyz);","        dO += ds;","        if(dO > 100. || ds < 0.01) break;","    }","    if (dO > 100.) discard;","    worldPos = vec4(ro + rd * dO, 1.);","    worldNormal = vec4(calcNormal((invWorld * worldPos).xyz), 0.);","","}"]};

// TransformBlock
var Transform = new BABYLON.TransformBlock("Transform");
Transform.visibleInInspector = false;
Transform.visibleOnFrame = false;
Transform.target = 1;
Transform.complementZ = 0;
Transform.complementW = 1;

// InputBlock
var Vector = new BABYLON.InputBlock("Vector4");
Vector.visibleInInspector = false;
Vector.visibleOnFrame = false;
Vector.target = 1;
Vector.value = new BABYLON.Vector4(0, 0, 0, 1);
Vector.isConstant = true;

// ReciprocalBlock
var Reciprocal = new BABYLON.ReciprocalBlock("Reciprocal");
Reciprocal.visibleInInspector = false;
Reciprocal.visibleOnFrame = false;
Reciprocal.target = 4;

// InputBlock
var View = new BABYLON.InputBlock("View");
View.visibleInInspector = false;
View.visibleOnFrame = false;
View.target = 1;
View.setAsSystemValue(BABYLON.NodeMaterialSystemValues.View);

// InputBlock
var Time = new BABYLON.InputBlock("Time");
Time.visibleInInspector = false;
Time.visibleOnFrame = false;
Time.target = 4;
Time.value = 1327.6552800007123;
Time.min = 0;
Time.max = 0;
Time.isBoolean = false;
Time.matrixMode = 0;
Time.animationType = BABYLON.AnimatedInputBlockTypes.Time;
Time.isConstant = false;

// InputBlock
var World1 = new BABYLON.InputBlock("World");
World1.visibleInInspector = false;
World1.visibleOnFrame = false;
World1.target = 1;
World1.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);

// FragDepthBlock
var FragDepth = new BABYLON.FragDepthBlock("FragDepth");
FragDepth.visibleInInspector = false;
FragDepth.visibleOnFrame = false;
FragDepth.target = 2;

// FragmentOutputBlock
var FragmentOutput = new BABYLON.FragmentOutputBlock("FragmentOutput");
FragmentOutput.visibleInInspector = false;
FragmentOutput.visibleOnFrame = false;
FragmentOutput.target = 2;
FragmentOutput.convertToGammaSpace = false;
FragmentOutput.convertToLinearSpace = false;
FragmentOutput.useLogarithmicDepth = false;

// VertexOutputBlock
var VertexOutput = new BABYLON.VertexOutputBlock("VertexOutput");
VertexOutput.visibleInInspector = false;
VertexOutput.visibleOnFrame = false;
VertexOutput.target = 1;

// Connections
position.output.connectTo(WorldPos.vector);
World.output.connectTo(WorldPos.transform);
WorldPos.output.connectTo(WorldPosViewProjectionTransform.vector);
ViewProjection.output.connectTo(WorldPosViewProjectionTransform.transform);
WorldPosViewProjectionTransform.output.connectTo(VertexOutput.vector);
WorldPos.xyz.connectTo(RayMarching.worldPosIn);
Vector.output.connectTo(Transform.vector);
View.output.connectTo(Reciprocal.input);
Reciprocal.output.connectTo(Transform.transform);
Transform.xyz.connectTo(RayMarching.cameraPosition);
Time.output.connectTo(RayMarching.time);
World1.output.connectTo(RayMarching.world);
RayMarching.worldPos.connectTo(ShadowMap.worldPosition);
ViewProjection.output.connectTo(ElbowBlock_20.input);
ElbowBlock_20.output.connectTo(ShadowMap.viewProjection);
RayMarching.worldNormal.connectTo(ShadowMap.worldNormal);
ShadowMap.depth.connectTo(FragmentOutput.rgb);
RayMarching.worldPos.connectTo(FragDepth.worldPos);
ViewProjection.output.connectTo(FragDepth.viewProjection);

// Output nodes
nodeMaterial.addOutputNode(VertexOutput);
nodeMaterial.addOutputNode(FragmentOutput);
nodeMaterial.addOutputNode(FragDepth);
nodeMaterial.build();
